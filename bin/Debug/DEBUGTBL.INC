
;--- This file was generated by mktables.exe.

;--- Operand type lists.
;--- They were read from file INSTR.KEY.

oplists label byte
	opl	;void - for instructions without operands
	opl OP_ALL+OP_AX, OP_ALL+OP_IMM ; idx=1, ofs=Dh
	opl OP_ALL+OP_RM, OP_ALL+OP_IMM ; idx=2, ofs=10h
	opl OP_1632+OP_RM, OP_IMMS8	; idx=3, ofs=13h
	opl OP_ALL+OP_RM, OP_ALL+OP_R	; idx=4, ofs=16h
	opl OP_ALL+OP_R, OP_ALL+OP_RM	; idx=5, ofs=19h
	opl OP_16+OP_RM, OP_16+OP_R	; idx=6, ofs=1Ch
	opl OP_1632+OP_R, OP_1632+OP_M	; idx=7, ofs=1Fh
	opl OP_1632+OP_R, OP_1632+OP_RM ; idx=8, ofs=22h
	opl OP_32+OP_R_ADD	; idx=9, ofs=25h
	opl OP_1632+OP_RM, OP_1632+OP_R ; idx=10, ofs=27h
	opl OP_1632+OP_RM, OP_IMM8	; idx=11, ofs=2Ah
	opl OP_REL1632	; idx=12, ofs=2Dh
	opl OP_FARIMM	; idx=13, ofs=2Fh
	opl OP_FARMEM	; idx=14, ofs=31h
	opl OP_M64	; idx=15, ofs=33h
	opl OP_ALL+OP_RM	; idx=16, ofs=35h
	opl OP_1632+OP_R_ADD	; idx=17, ofs=37h
	opl OP_16+OP_IMM, OP_IMM8	; idx=18, ofs=39h
	opl OP_MFLOAT	; idx=19, ofs=3Ch
	opl OP_MDOUBLE	; idx=20, ofs=3Eh
	opl OP_ST, OP_STI	; idx=21, ofs=40h
	opl OP_STI, OP_ST	; idx=22, ofs=43h
	opl OP_1CHK, OP_STI, OP_ST	; idx=23, ofs=46h
	opl OP_32+OP_M	; idx=24, ofs=4Ah
	opl OP_16+OP_M	; idx=25, ofs=4Ch
	opl OP_M80	; idx=26, ofs=4Eh
	opl OP_STI	; idx=27, ofs=50h
	opl OP_1CHK, OP_STI	; idx=28, ofs=52h
	opl OP_MXX	; idx=29, ofs=55h
	opl OP_16+OP_AX ; idx=30, ofs=57h
	opl OP_1632+OP_R, OP_1632+OP_RM, OP_IMMS8	; idx=31, ofs=59h
	opl OP_1632+OP_R_MOD, OP_1632+OP_R, OP_IMMS8	; idx=32, ofs=5Dh
	opl OP_1632+OP_R, OP_1632+OP_RM, OP_1632+OP_IMM ; idx=33, ofs=61h
	opl OP_1632+OP_R_MOD, OP_1632+OP_R, OP_1632+OP_IMM	; idx=34, ofs=65h
	opl OP_ALL+OP_AX, OP_IMM8	; idx=35, ofs=69h
	opl OP_ALL+OP_AX, OP_DX ; idx=36, ofs=6Ch
	opl OP_3	; idx=37, ofs=6Fh
	opl OP_IMM8	; idx=38, ofs=71h
	opl OP_REL8	; idx=39, ofs=73h
	opl OP_1632+OP_RM	; idx=40, ofs=75h
	opl OP_16+OP_RM ; idx=41, ofs=77h
	opl OP_1632+OP_RM, OP_SEGREG	; idx=42, ofs=79h
	opl OP_SEGREG, OP_1632+OP_RM	; idx=43, ofs=7Ch
	opl OP_ALL+OP_AX, OP_ALL+OP_MOFFS	; idx=44, ofs=7Fh
	opl OP_ALL+OP_MOFFS, OP_ALL+OP_AX	; idx=45, ofs=82h
	opl OP_8+OP_R_ADD, OP_8+OP_IMM	; idx=46, ofs=85h
	opl OP_1632+OP_R_ADD, OP_1632+OP_IMM	; idx=47, ofs=88h
	opl OP_1632+OP_R, OP_SHOSIZ, OP_8+OP_RM ; idx=48, ofs=8Bh
	opl OP_1632+OP_R, OP_SHOSIZ, OP_16+OP_RM	; idx=49, ofs=8Fh
	opl OP_IMM8, OP_ALL+OP_AX	; idx=50, ofs=93h
	opl OP_DX, OP_ALL+OP_AX ; idx=51, ofs=96h
	opl OP_1632+OP_M	; idx=52, ofs=99h
	opl OP_1632+OP_IMM	; idx=53, ofs=9Bh
	opl OP_IMMS8	; idx=54, ofs=9Dh
	opl OP_ALL+OP_RM, OP_1	; idx=55, ofs=9Fh
	opl OP_ALL+OP_RM, OP_CL ; idx=56, ofs=A2h
	opl OP_ALL+OP_RM, OP_IMM8	; idx=57, ofs=A5h
	opl OP_16+OP_IMM	; idx=58, ofs=A8h
	opl OP_8+OP_RM	; idx=59, ofs=AAh
	opl OP_1632+OP_RM, OP_1632+OP_R, OP_IMM8	; idx=60, ofs=ACh
	opl OP_1632+OP_RM, OP_1632+OP_R, OP_CL	; idx=61, ofs=B0h
	opl OP_1632+OP_AX, OP_1632+OP_R_ADD	; idx=62, ofs=B4h
	opl OP_1632+OP_R_ADD, OP_1632+OP_AX	; idx=63, ofs=B7h
	opl OP_ES	; idx=64, ofs=BAh
	opl OP_CS	; idx=65, ofs=BCh
	opl OP_SS	; idx=66, ofs=BEh
	opl OP_DS	; idx=67, ofs=C0h
	opl OP_FS	; idx=68, ofs=C2h
	opl OP_GS	; idx=69, ofs=C4h
	opl OP_32+OP_R_MOD, OP_CR	; idx=70, ofs=C6h
	opl OP_CR, OP_32+OP_R_MOD	; idx=71, ofs=C9h
	opl OP_32+OP_R_MOD, OP_DR	; idx=72, ofs=CCh
	opl OP_DR, OP_32+OP_R_MOD	; idx=73, ofs=CFh
	opl OP_32+OP_R_MOD, OP_TR	; idx=74, ofs=D2h
	opl OP_TR, OP_32+OP_R_MOD	; idx=75, ofs=D5h
if MMXSUPP
	opl OP_MMX, OP_32+OP_RM
	opl OP_32+OP_RM, OP_MMX
	opl OP_MMX, OP_64+OP_RM
	opl OP_64+OP_RM, OP_MMX
endif

ASMMOD	EQU opidx

;--- Assembler: data on groups.
;--- If HiByte == 01, it's a "0F-prefix" group.

agroups label word
	dw 083h ;0
	dw 080h ;1
	dw 1BAh ;2
	dw 0FFh ;3
	dw 1C7h ;4
	dw 0FEh ;5
	dw 0F6h ;6
	dw 101h ;7
	dw 100h ;8
	dw 0C6h ;9
	dw 08Fh ;10
	dw 0D0h ;11
	dw 0D2h ;12
	dw 0C0h ;13

;--- List of assembler mnemonics and data.
;--- variant's 1. argument (=a):
;---   if a < 0x100: one byte opcode.
;---   if a >= 0x100 && a < 0x200: two byte "0F"-opcode.
;---   if a >= 0x200 && a < 0x240: fp instruction.
;---   if a >= 0x240: refers to agroups [macro AGRP() is used].
;--- variant's 2. argument is index into array opindex.

mnlist label byte
	mne AAA ; ofs=0h
	 variant 037h, 0
	 endvariant
	mne AAD, ASM_AAX	; ofs=3h
	 variant 0d5h, 38
	 endvariant
	mne AAM, ASM_AAX	; ofs=7h
	 variant 0d4h, 38
	 endvariant
	mne AAS ; ofs=Bh
	 variant 03fh, 0
	 endvariant
	mne ADC ; ofs=Eh
	 variant AGRP(0,2), 3, ASM_LOCKABLE
	 variant 014h, 1
	 variant AGRP(1,2), 2, ASM_LOCKABLE
	 variant 010h, 4, ASM_LOCKABLE
	 variant 012h, 5
	 endvariant
	mne ADD ; ofs=1Ch
	 variant AGRP(0,0), 3, ASM_LOCKABLE
	 variant 004h, 1
	 variant AGRP(1,0), 2, ASM_LOCKABLE
	 variant 000h, 4, ASM_LOCKABLE
	 variant 002h, 5
	 endvariant
	mne AND ; ofs=2Ah
	 variant AGRP(0,4), 3, ASM_LOCKABLE
	 variant 024h, 1
	 variant AGRP(1,4), 2, ASM_LOCKABLE
	 variant 020h, 4, ASM_LOCKABLE
	 variant 022h, 5
	 endvariant
	mne ARPL	; ofs=38h
	 variant 063h, 6, , ASM_MACH2
	 endvariant
	mne BOUND	; ofs=3Ch
	 variant 062h, 7, , ASM_MACH1
	 endvariant
	mne BSF ; ofs=40h
	 variant 1bch, 8, , ASM_MACH3
	 endvariant
	mne BSR ; ofs=44h
	 variant 1bdh, 8, , ASM_MACH3
	 endvariant
	mne BSWAP, ASM_D32	; ofs=48h
	 variant 1c8h, 9, , ASM_MACH4
	 endvariant
	mne BT	; ofs=4Dh
	 variant 1a3h, 10, , ASM_MACH3
	 variant AGRP(2,4), 11, , ASM_MACH3
	 endvariant
	mne BTC ; ofs=54h
	 variant 1bbh, 10, ASM_LOCKABLE, ASM_MACH3
	 variant AGRP(2,7), 11, ASM_LOCKABLE, ASM_MACH3
	 endvariant
	mne BTR ; ofs=5Dh
	 variant 1b3h, 10, ASM_LOCKABLE, ASM_MACH3
	 variant AGRP(2,6), 11, ASM_LOCKABLE, ASM_MACH3
	 endvariant
	mne BTS ; ofs=66h
	 variant 1abh, 10, ASM_LOCKABLE, ASM_MACH3
	 variant AGRP(2,5), 11, ASM_LOCKABLE, ASM_MACH3
	 endvariant
	mne CALL	; ofs=6Fh
	 variant 0e8h, 12
	 variant AGRP(3,2), 40
	 variant AGRP(3,3), 14
	 variant 09ah, 13
	 endvariant
	mne CBW, ASM_D16	; ofs=78h
	mne CWDE, ASM_D32	; ofs=79h
	 variant 098h, 0
	 endvariant
	mne CLC ; ofs=7Dh
	 variant 0f8h, 0
	 endvariant
	mne CLD ; ofs=80h
	 variant 0fch, 0
	 endvariant
	mne CLI ; ofs=83h
	 variant 0fah, 0
	 endvariant
	mne CLTS	; ofs=86h
	 variant 106h, 0, , ASM_MACH2
	 endvariant
	mne CMC ; ofs=8Ah
	 variant 0f5h, 0
	 endvariant
	mne CMOVA	; ofs=8Dh
	 variant 147h, 8, , ASM_MACH6
	 endvariant
	mne CMOVAE	; ofs=91h
	 variant 143h, 8, , ASM_MACH6
	 endvariant
	mne CMOVB	; ofs=95h
	 variant 142h, 8, , ASM_MACH6
	 endvariant
	mne CMOVBE	; ofs=99h
	 variant 146h, 8, , ASM_MACH6
	 endvariant
	mne CMOVC	; ofs=9Dh
	 variant 142h, 8, , ASM_MACH6
	 endvariant
	mne CMOVE	; ofs=A1h
	 variant 144h, 8, , ASM_MACH6
	 endvariant
	mne CMOVG	; ofs=A5h
	 variant 14fh, 8, , ASM_MACH6
	 endvariant
	mne CMOVGE	; ofs=A9h
	 variant 14dh, 8, , ASM_MACH6
	 endvariant
	mne CMOVL	; ofs=ADh
	 variant 14ch, 8, , ASM_MACH6
	 endvariant
	mne CMOVLE	; ofs=B1h
	 variant 14eh, 8, , ASM_MACH6
	 endvariant
	mne CMOVNA	; ofs=B5h
	 variant 146h, 8, , ASM_MACH6
	 endvariant
	mne CMOVNAE	; ofs=B9h
	 variant 142h, 8, , ASM_MACH6
	 endvariant
	mne CMOVNB	; ofs=BDh
	 variant 143h, 8, , ASM_MACH6
	 endvariant
	mne CMOVNBE	; ofs=C1h
	 variant 147h, 8, , ASM_MACH6
	 endvariant
	mne CMOVNC	; ofs=C5h
	 variant 143h, 8, , ASM_MACH6
	 endvariant
	mne CMOVNE	; ofs=C9h
	 variant 145h, 8, , ASM_MACH6
	 endvariant
	mne CMOVNG	; ofs=CDh
	 variant 14eh, 8, , ASM_MACH6
	 endvariant
	mne CMOVNGE	; ofs=D1h
	 variant 14ch, 8, , ASM_MACH6
	 endvariant
	mne CMOVNL	; ofs=D5h
	 variant 14dh, 8, , ASM_MACH6
	 endvariant
	mne CMOVNLE	; ofs=D9h
	 variant 14fh, 8, , ASM_MACH6
	 endvariant
	mne CMOVNO	; ofs=DDh
	 variant 141h, 8, , ASM_MACH6
	 endvariant
	mne CMOVNP	; ofs=E1h
	 variant 14bh, 8, , ASM_MACH6
	 endvariant
	mne CMOVNS	; ofs=E5h
	 variant 149h, 8, , ASM_MACH6
	 endvariant
	mne CMOVNZ	; ofs=E9h
	 variant 145h, 8, , ASM_MACH6
	 endvariant
	mne CMOVO	; ofs=EDh
	 variant 140h, 8, , ASM_MACH6
	 endvariant
	mne CMOVP	; ofs=F1h
	 variant 14ah, 8, , ASM_MACH6
	 endvariant
	mne CMOVPE	; ofs=F5h
	 variant 14ah, 8, , ASM_MACH6
	 endvariant
	mne CMOVPO	; ofs=F9h
	 variant 14bh, 8, , ASM_MACH6
	 endvariant
	mne CMOVS	; ofs=FDh
	 variant 148h, 8, , ASM_MACH6
	 endvariant
	mne CMOVZ	; ofs=101h
	 variant 144h, 8, , ASM_MACH6
	 endvariant
	mne CMP ; ofs=105h
	 variant AGRP(0,7), 3
	 variant 03ch, 1
	 variant AGRP(1,7), 2
	 variant 038h, 4
	 variant 03ah, 5
	 endvariant
	mne CMPSB	; ofs=110h
	 variant 0a6h, 0
	 endvariant
	mne CMPSW, ASM_D16	; ofs=113h
	mne CMPSD, ASM_D32	; ofs=114h
	 variant 0a7h, 0
	 endvariant
	mne CMPXCHG	; ofs=118h
	 variant 1b0h, 4, ASM_LOCKABLE, ASM_MACH4
	 endvariant
	mne CMPXCHG8B	; ofs=11Dh
	 variant AGRP(4,1), 15, , ASM_MACH5
	 endvariant
	mne CPUID	; ofs=121h
	 variant 1a2h, 0, , ASM_MACH5
	 endvariant
	mne CWD, ASM_D16	; ofs=125h
	mne CDQ, ASM_D32	; ofs=126h
	 variant 099h, 0
	 endvariant
	mne DAA ; ofs=12Ah
	 variant 027h, 0
	 endvariant
	mne DAS ; ofs=12Dh
	 variant 02fh, 0
	 endvariant
	mne DB, ASM_DB	; ofs=130h
	mne DD, ASM_DD	; ofs=132h
	mne DEC ; ofs=134h
	 variant 048h, 17
	 variant AGRP(5,1), 16, ASM_LOCKABLE
	 endvariant
	mne DIV ; ofs=13Ah
	 variant AGRP(6,6), 16
	 endvariant
	mne DW, ASM_DW	; ofs=13Dh
	mne ENTER	; ofs=13Fh
	 variant 0c8h, 18, , ASM_MACH1
	 endvariant
	mne F2XM1	; ofs=143h
	 fpvariant 0d9h, 0, 0f0h
	 endvariant
	mne FABS	; ofs=147h
	 fpvariant 0d9h, 0, 0e1h
	 endvariant
	mne FADD	; ofs=14Bh
	 variant 200h, 19
	 variant 204h, 20
	 fpvariant 0d8h, 21, 0c0h
	 fpvariant 0dch, 22, 0c0h
	 endvariant
	mne FADDP	; ofs=156h
	 fpvariant 0deh, 23, 0c0h
	 fpvariant 0deh, 0, 0c1h
	 endvariant
	mne FBLD	; ofs=15Dh
	 variant 227h, 26
	 endvariant
	mne FBSTP	; ofs=160h
	 variant 237h, 26
	 endvariant
	mne FCHS	; ofs=163h
	 fpvariant 0d9h, 0, 0e0h
	 endvariant
	mne FCLEX, ASM_WAIT	; ofs=167h
	mne FNCLEX	; ofs=168h
	 fpvariant 0dbh, 0, 0e2h
	 endvariant
	mne FCMOVB	; ofs=16Ch
	 fpvariant 0dah, 21, 0c0h, , ASM_MACH6
	 endvariant
	mne FCMOVBE	; ofs=171h
	 fpvariant 0dah, 21, 0d0h, , ASM_MACH6
	 endvariant
	mne FCMOVE	; ofs=176h
	 fpvariant 0dah, 21, 0c8h, , ASM_MACH6
	 endvariant
	mne FCMOVNB	; ofs=17Bh
	 fpvariant 0dbh, 21, 0c0h, , ASM_MACH6
	 endvariant
	mne FCMOVNBE	; ofs=180h
	 fpvariant 0dbh, 21, 0d0h, , ASM_MACH6
	 endvariant
	mne FCMOVNE	; ofs=185h
	 fpvariant 0dbh, 21, 0c8h, , ASM_MACH6
	 endvariant
	mne FCMOVNU	; ofs=18Ah
	 fpvariant 0dbh, 21, 0d8h, , ASM_MACH6
	 endvariant
	mne FCMOVU	; ofs=18Fh
	 fpvariant 0dah, 21, 0d8h, , ASM_MACH6
	 endvariant
	mne FCOM	; ofs=194h
	 variant 210h, 19
	 variant 214h, 20
	 fpvariant 0d8h, 28, 0d0h
	 fpvariant 0d8h, 0, 0d1h
	 endvariant
	mne FCOMI	; ofs=19Fh
	 fpvariant 0dbh, 28, 0f0h, , ASM_MACH6
	 fpvariant 0dbh, 0, 0f1h, , ASM_MACH6
	 endvariant
	mne FCOMIP	; ofs=1A8h
	 fpvariant 0dfh, 28, 0f0h, , ASM_MACH6
	 fpvariant 0dfh, 0, 0f1h, , ASM_MACH6
	 endvariant
	mne FCOMP	; ofs=1B1h
	 variant 218h, 19
	 variant 21ch, 20
	 fpvariant 0d8h, 28, 0d8h
	 fpvariant 0d8h, 0, 0d9h
	 endvariant
	mne FCOMPP	; ofs=1BCh
	 fpvariant 0deh, 0, 0d9h
	 endvariant
	mne FCOS	; ofs=1C0h
	 fpvariant 0d9h, 0, 0ffh, , ASM_MACH3
	 endvariant
	mne FDECSTP	; ofs=1C5h
	 fpvariant 0d9h, 0, 0f6h
	 endvariant
	mne FDISI, ASM_WAIT	; ofs=1C9h
	mne FNDISI	; ofs=1CAh
	 fpvariant 0dbh, 0, 0e1h
	 endvariant
	mne FDIV	; ofs=1CEh
	 variant 230h, 19
	 variant 234h, 20
	 fpvariant 0d8h, 21, 0f0h
	 fpvariant 0dch, 22, 0f8h
	 endvariant
	mne FDIVP	; ofs=1D9h
	 fpvariant 0deh, 23, 0f8h
	 fpvariant 0deh, 0, 0f9h
	 endvariant
	mne FDIVR	; ofs=1E0h
	 variant 238h, 19
	 variant 23ch, 20
	 fpvariant 0d8h, 21, 0f8h
	 fpvariant 0dch, 22, 0f0h
	 endvariant
	mne FDIVRP	; ofs=1EBh
	 fpvariant 0deh, 23, 0f0h
	 fpvariant 0deh, 0, 0f1h
	 endvariant
	mne FENI, ASM_WAIT	; ofs=1F2h
	mne FNENI	; ofs=1F3h
	 fpvariant 0dbh, 0, 0e0h
	 endvariant
	mne FFREE	; ofs=1F7h
	 fpvariant 0ddh, 27, 0c0h
	 endvariant
	mne FFREEP	; ofs=1FBh
	 fpvariant 0dfh, 27, 0c0h
	 endvariant
	mne FIADD	; ofs=1FFh
	 variant 202h, 24
	 variant 206h, 25
	 endvariant
	mne FICOM	; ofs=204h
	 variant 212h, 24
	 variant 216h, 25
	 endvariant
	mne FICOMP	; ofs=209h
	 variant 21ah, 24
	 variant 21eh, 25
	 endvariant
	mne FIDIV	; ofs=20Eh
	 variant 232h, 24
	 variant 236h, 25
	 endvariant
	mne FIDIVR	; ofs=213h
	 variant 23ah, 24
	 variant 23eh, 25
	 endvariant
	mne FILD	; ofs=218h
	 variant 203h, 24
	 variant 207h, 25
	 variant 22fh, 15
	 endvariant
	mne FIMUL	; ofs=21Fh
	 variant 20ah, 24
	 variant 20eh, 25
	 endvariant
	mne FINCSTP	; ofs=224h
	 fpvariant 0d9h, 0, 0f7h
	 endvariant
	mne FINIT, ASM_WAIT	; ofs=228h
	mne FNINIT	; ofs=229h
	 fpvariant 0dbh, 0, 0e3h
	 endvariant
	mne FIST	; ofs=22Dh
	 variant 213h, 24
	 variant 217h, 25
	 endvariant
	mne FISTP	; ofs=232h
	 variant 21bh, 24
	 variant 21fh, 25
	 variant 23fh, 15
	 endvariant
	mne FISUB	; ofs=239h
	 variant 222h, 24
	 variant 226h, 25
	 endvariant
	mne FISUBR	; ofs=23Eh
	 variant 22ah, 24
	 variant 22eh, 25
	 endvariant
	mne FLD ; ofs=243h
	 variant 201h, 19
	 variant 205h, 20
	 variant 22bh, 26
	 fpvariant 0d9h, 27, 0c0h
	 endvariant
	mne FLD1	; ofs=24Dh
	 fpvariant 0d9h, 0, 0e8h
	 endvariant
	mne FLDL2T	; ofs=251h
	 fpvariant 0d9h, 0, 0e9h
	 endvariant
	mne FLDL2E	; ofs=255h
	 fpvariant 0d9h, 0, 0eah
	 endvariant
	mne FLDPI	; ofs=259h
	 fpvariant 0d9h, 0, 0ebh
	 endvariant
	mne FLDLG2	; ofs=25Dh
	 fpvariant 0d9h, 0, 0ech
	 endvariant
	mne FLDLN2	; ofs=261h
	 fpvariant 0d9h, 0, 0edh
	 endvariant
	mne FLDZ	; ofs=265h
	 fpvariant 0d9h, 0, 0eeh
	 endvariant
	mne FLDCW	; ofs=269h
	 variant 229h, 25
	 endvariant
	mne FLDENV	; ofs=26Ch
	 variant 221h, 29
	 endvariant
	mne FLDENVW, ASM_D16	; ofs=26Fh
	mne FLDENVD, ASM_D32	; ofs=270h
	 variant 221h, 29
	 endvariant
	mne FMUL	; ofs=274h
	 variant 208h, 19
	 variant 20ch, 20
	 fpvariant 0d8h, 21, 0c8h
	 fpvariant 0dch, 22, 0c8h
	 endvariant
	mne FMULP	; ofs=27Fh
	 fpvariant 0deh, 23, 0c8h
	 fpvariant 0deh, 0, 0c9h
	 endvariant
	mne FNOP	; ofs=286h
	 fpvariant 0d9h, 0, 0d0h
	 endvariant
	mne FPATAN	; ofs=28Ah
	 fpvariant 0d9h, 0, 0f3h
	 endvariant
	mne FPREM	; ofs=28Eh
	 fpvariant 0d9h, 0, 0f8h
	 endvariant
	mne FPREM1	; ofs=292h
	 fpvariant 0d9h, 0, 0f5h, , ASM_MACH3
	 endvariant
	mne FPTAN	; ofs=297h
	 fpvariant 0d9h, 0, 0f2h
	 endvariant
	mne FRNDINT	; ofs=29Bh
	 fpvariant 0d9h, 0, 0fch
	 endvariant
	mne FRSTOR	; ofs=29Fh
	 variant 225h, 29
	 endvariant
	mne FRSTORW, ASM_D16	; ofs=2A2h
	mne FRSTORD, ASM_D32	; ofs=2A3h
	 variant 225h, 29
	 endvariant
	mne FSAVE, ASM_WAIT	; ofs=2A7h
	mne FNSAVE	; ofs=2A8h
	 variant 235h, 29
	 endvariant
	mne FSAVEW, ASM_D16	; ofs=2ABh
	mne FSAVED, ASM_D32	; ofs=2ACh
	 variant 235h, 29
	 endvariant
	mne FSCALE	; ofs=2B0h
	 fpvariant 0d9h, 0, 0fdh
	 endvariant
	mne FSETPM	; ofs=2B4h
	 fpvariant 0dbh, 0, 0e4h, , ASM_MACH2
	 endvariant
	mne FSIN	; ofs=2B9h
	 fpvariant 0d9h, 0, 0feh, , ASM_MACH3
	 endvariant
	mne FSINCOS	; ofs=2BEh
	 fpvariant 0d9h, 0, 0fbh, , ASM_MACH3
	 endvariant
	mne FSQRT	; ofs=2C3h
	 fpvariant 0d9h, 0, 0fah
	 endvariant
	mne FST ; ofs=2C7h
	 variant 211h, 19
	 variant 215h, 20
	 fpvariant 0ddh, 27, 0d0h
	 endvariant
	mne FSTP	; ofs=2CFh
	 variant 219h, 19
	 variant 21dh, 20
	 variant 23bh, 26
	 fpvariant 0ddh, 27, 0d8h
	 endvariant
	mne FSTCW, ASM_WAIT	; ofs=2D9h
	mne FNSTCW	; ofs=2DAh
	 variant 239h, 25
	 endvariant
	mne FSTENV, ASM_WAIT	; ofs=2DDh
	mne FNSTENV	; ofs=2DEh
	 variant 231h, 29
	 endvariant
	mne FSTENVW, ASM_D16	; ofs=2E1h
	mne FSTENVD, ASM_D32	; ofs=2E2h
	 variant 231h, 29
	 endvariant
	mne FSTSW, ASM_WAIT	; ofs=2E6h
	mne FNSTSW	; ofs=2E7h
	 fpvariant 0dfh, 30, 0e0h, , ASM_MACH2
	 variant 23dh, 25
	 endvariant
	mne FSUB	; ofs=2EEh
	 variant 220h, 19
	 variant 224h, 20
	 fpvariant 0d8h, 21, 0e0h
	 fpvariant 0dch, 22, 0e8h
	 endvariant
	mne FSUBP	; ofs=2F9h
	 fpvariant 0deh, 23, 0e8h
	 fpvariant 0deh, 0, 0e9h
	 endvariant
	mne FSUBR	; ofs=300h
	 variant 228h, 19
	 variant 22ch, 20
	 fpvariant 0d8h, 21, 0e8h
	 fpvariant 0dch, 22, 0e0h
	 endvariant
	mne FSUBRP	; ofs=30Bh
	 fpvariant 0deh, 23, 0e0h
	 fpvariant 0deh, 0, 0e1h
	 endvariant
	mne FTST	; ofs=312h
	 fpvariant 0d9h, 0, 0e4h
	 endvariant
	mne FUCOM	; ofs=316h
	 fpvariant 0ddh, 28, 0e0h, , ASM_MACH3
	 fpvariant 0ddh, 0, 0e1h, , ASM_MACH3
	 endvariant
	mne FUCOMI	; ofs=31Fh
	 fpvariant 0dbh, 28, 0e8h, , ASM_MACH6
	 fpvariant 0dbh, 0, 0e9h, , ASM_MACH6
	 endvariant
	mne FUCOMIP	; ofs=328h
	 fpvariant 0dfh, 28, 0e8h, , ASM_MACH6
	 fpvariant 0dfh, 0, 0e9h, , ASM_MACH6
	 endvariant
	mne FUCOMP	; ofs=331h
	 fpvariant 0ddh, 28, 0e8h, , ASM_MACH3
	 fpvariant 0ddh, 0, 0e9h, , ASM_MACH3
	 endvariant
	mne FUCOMPP	; ofs=33Ah
	 fpvariant 0dah, 0, 0e9h, , ASM_MACH3
	 endvariant
	mne FWAIT	; ofs=33Fh
	 variant 09bh, 0
	 endvariant
	mne FXAM	; ofs=342h
	 fpvariant 0d9h, 0, 0e5h
	 endvariant
	mne FXCH	; ofs=346h
	 fpvariant 0d9h, 28, 0c8h
	 fpvariant 0d9h, 0, 0c9h
	 endvariant
	mne FXTRACT	; ofs=34Dh
	 fpvariant 0d9h, 0, 0f4h
	 endvariant
	mne FYL2X	; ofs=351h
	 fpvariant 0d9h, 0, 0f1h
	 endvariant
	mne FYL2XP1	; ofs=355h
	 fpvariant 0d9h, 0, 0f9h
	 endvariant
	mne HLT ; ofs=359h
	 variant 0f4h, 0
	 endvariant
	mne IDIV	; ofs=35Ch
	 variant AGRP(6,7), 16
	 endvariant
	mne IMUL	; ofs=35Fh
	 variant AGRP(6,5), 16
	 variant 1afh, 8, , ASM_MACH3
	 variant 06bh, 31, , ASM_MACH1
	 variant 06bh, 32, , ASM_MACH1
	 variant 069h, 33, , ASM_MACH1
	 variant 069h, 34, , ASM_MACH1
	 endvariant
	mne IN	; ofs=371h
	 variant 0e4h, 35
	 variant 0ech, 36
	 endvariant
	mne INC ; ofs=376h
	 variant 040h, 17
	 variant AGRP(5,0), 16, ASM_LOCKABLE
	 endvariant
	mne INSB	; ofs=37Ch
	 variant 06ch, 0, , ASM_MACH1
	 endvariant
	mne INSW, ASM_D16	; ofs=380h
	mne INSD, ASM_D32	; ofs=381h
	 variant 06dh, 0, , ASM_MACH1
	 endvariant
	mne INT ; ofs=386h
	 variant 0cch, 37
	 variant 0cdh, 38
	 endvariant
	mne INT1	; ofs=38Bh
	 variant 0f1h, 0, , ASM_MACH3
	 endvariant
	mne INTO	; ofs=38Fh
	 variant 0ceh, 0
	 endvariant
	mne INVD	; ofs=392h
	 variant 108h, 0, , ASM_MACH4
	 endvariant
	mne INVLPG	; ofs=396h
	 variant AGRP(7,7), 29, , ASM_MACH4
	 endvariant
	mne IRET, ASM_D16	; ofs=39Ah
	mne IRETD, ASM_D32	; ofs=39Bh
	 variant 0cfh, 0
	 endvariant
	mne JA	; ofs=39Fh
	 variant 077h, 39
	 variant 187h, 12, , ASM_MACH3
	 endvariant
	mne JAE ; ofs=3A5h
	 variant 073h, 39
	 variant 183h, 12, , ASM_MACH3
	 endvariant
	mne JB	; ofs=3ABh
	 variant 072h, 39
	 variant 182h, 12, , ASM_MACH3
	 endvariant
	mne JBE ; ofs=3B1h
	 variant 076h, 39
	 variant 186h, 12, , ASM_MACH3
	 endvariant
	mne JC	; ofs=3B7h
	 variant 072h, 39
	 variant 182h, 12, , ASM_MACH3
	 endvariant
	mne JCXZ, ASM_D16	; ofs=3BDh
	mne JECXZ, ASM_D32	; ofs=3BEh
	 variant 0e3h, 39
	 endvariant
	mne JE	; ofs=3C2h
	 variant 074h, 39
	 variant 184h, 12, , ASM_MACH3
	 endvariant
	mne JG	; ofs=3C8h
	 variant 07fh, 39
	 variant 18fh, 12, , ASM_MACH3
	 endvariant
	mne JGE ; ofs=3CEh
	 variant 07dh, 39
	 variant 18dh, 12, , ASM_MACH3
	 endvariant
	mne JL	; ofs=3D4h
	 variant 07ch, 39
	 variant 18ch, 12, , ASM_MACH3
	 endvariant
	mne JLE ; ofs=3DAh
	 variant 07eh, 39
	 variant 18eh, 12, , ASM_MACH3
	 endvariant
	mne JNA ; ofs=3E0h
	 variant 076h, 39
	 variant 186h, 12, , ASM_MACH3
	 endvariant
	mne JNAE	; ofs=3E6h
	 variant 072h, 39
	 variant 182h, 12, , ASM_MACH3
	 endvariant
	mne JNB ; ofs=3ECh
	 variant 073h, 39
	 variant 183h, 12, , ASM_MACH3
	 endvariant
	mne JNBE	; ofs=3F2h
	 variant 077h, 39
	 variant 187h, 12, , ASM_MACH3
	 endvariant
	mne JNC ; ofs=3F8h
	 variant 073h, 39
	 variant 183h, 12, , ASM_MACH3
	 endvariant
	mne JNE ; ofs=3FEh
	 variant 075h, 39
	 variant 185h, 12, , ASM_MACH3
	 endvariant
	mne JNG ; ofs=404h
	 variant 07eh, 39
	 variant 18eh, 12, , ASM_MACH3
	 endvariant
	mne JNGE	; ofs=40Ah
	 variant 07ch, 39
	 variant 18ch, 12, , ASM_MACH3
	 endvariant
	mne JNL ; ofs=410h
	 variant 07dh, 39
	 variant 18dh, 12, , ASM_MACH3
	 endvariant
	mne JNLE	; ofs=416h
	 variant 07fh, 39
	 variant 18fh, 12, , ASM_MACH3
	 endvariant
	mne JNO ; ofs=41Ch
	 variant 071h, 39
	 variant 181h, 12, , ASM_MACH3
	 endvariant
	mne JNP ; ofs=422h
	 variant 07bh, 39
	 variant 18bh, 12, , ASM_MACH3
	 endvariant
	mne JNS ; ofs=428h
	 variant 079h, 39
	 variant 189h, 12, , ASM_MACH3
	 endvariant
	mne JNZ ; ofs=42Eh
	 variant 075h, 39
	 variant 185h, 12, , ASM_MACH3
	 endvariant
	mne JO	; ofs=434h
	 variant 070h, 39
	 variant 180h, 12, , ASM_MACH3
	 endvariant
	mne JP	; ofs=43Ah
	 variant 07ah, 39
	 variant 18ah, 12, , ASM_MACH3
	 endvariant
	mne JPE ; ofs=440h
	 variant 07ah, 39
	 variant 18ah, 12, , ASM_MACH3
	 endvariant
	mne JPO ; ofs=446h
	 variant 07bh, 39
	 variant 18bh, 12, , ASM_MACH3
	 endvariant
	mne JS	; ofs=44Ch
	 variant 078h, 39
	 variant 188h, 12, , ASM_MACH3
	 endvariant
	mne JZ	; ofs=452h
	 variant 074h, 39
	 variant 184h, 12, , ASM_MACH3
	 endvariant
	mne JMP ; ofs=458h
	 variant 0ebh, 39
	 variant 0e9h, 12
	 variant AGRP(3,4), 40
	 variant AGRP(3,5), 14
	 variant 0eah, 13
	 endvariant
	mne LAHF	; ofs=463h
	 variant 09fh, 0
	 endvariant
	mne LAR ; ofs=466h
	 variant 102h, 8, , ASM_MACH2
	 endvariant
	mne LDS ; ofs=46Ah
	 variant 0c5h, 7
	 endvariant
	mne LES ; ofs=46Dh
	 variant 0c4h, 7
	 endvariant
	mne LFS ; ofs=470h
	 variant 1b4h, 7, , ASM_MACH3
	 endvariant
	mne LGS ; ofs=474h
	 variant 1b5h, 7, , ASM_MACH3
	 endvariant
	mne LSS ; ofs=478h
	 variant 1b2h, 7, , ASM_MACH3
	 endvariant
	mne LEA ; ofs=47Ch
	 variant 08dh, 7
	 endvariant
	mne LEAVE	; ofs=47Fh
	 variant 0c9h, 0, , ASM_MACH1
	 endvariant
	mne LGDT	; ofs=483h
	 variant AGRP(7,2), 29, , ASM_MACH2
	 endvariant
	mne LIDT	; ofs=487h
	 variant AGRP(7,3), 29, , ASM_MACH2
	 endvariant
	mne LLDT	; ofs=48Bh
	 variant AGRP(8,2), 41, , ASM_MACH2
	 endvariant
	mne LMSW	; ofs=48Fh
	 variant AGRP(7,6), 41, , ASM_MACH2
	 endvariant
	mne LOCK, ASM_LOCKREP, 0f0h	; ofs=493h
	mne LODSB	; ofs=495h
	 variant 0ach, 0
	 endvariant
	mne LODSW, ASM_D16	; ofs=498h
	mne LODSD, ASM_D32	; ofs=499h
	 variant 0adh, 0
	 endvariant
	mne LOOP	; ofs=49Dh
	 variant 0e2h, 39
	 endvariant
	mne LOOPW, ASM_D16	; ofs=4A0h
	mne LOOPD, ASM_D32	; ofs=4A1h
	 variant 0e2h, 39
	 endvariant
	mne LOOPE	; ofs=4A5h
	 variant 0e1h, 39
	 endvariant
	mne LOOPEW, ASM_D16	; ofs=4A8h
	mne LOOPED, ASM_D32	; ofs=4A9h
	 variant 0e1h, 39
	 endvariant
	mne LOOPZ	; ofs=4ADh
	 variant 0e1h, 39
	 endvariant
	mne LOOPZW, ASM_D16	; ofs=4B0h
	mne LOOPZD, ASM_D32	; ofs=4B1h
	 variant 0e1h, 39
	 endvariant
	mne LOOPNE	; ofs=4B5h
	 variant 0e0h, 39
	 endvariant
	mne LOOPNEW, ASM_D16	; ofs=4B8h
	mne LOOPNED, ASM_D32	; ofs=4B9h
	 variant 0e0h, 39
	 endvariant
	mne LOOPNZ	; ofs=4BDh
	 variant 0e0h, 39
	 endvariant
	mne LOOPNZW, ASM_D16	; ofs=4C0h
	mne LOOPNZD, ASM_D32	; ofs=4C1h
	 variant 0e0h, 39
	 endvariant
	mne LSL ; ofs=4C5h
	 variant 103h, 8, , ASM_MACH2
	 endvariant
	mne LTR ; ofs=4C9h
	 variant AGRP(8,3), 41, , ASM_MACH2
	 endvariant
	mne MOV ; ofs=4CDh
	 variant 0a0h, 44
	 variant 0a2h, 45
	 variant 088h, 4
	 variant 08ah, 5
	 variant 08ch, 42
	 variant 08eh, 43
	 variant 0b0h, 46
	 variant 0b8h, 47
	 variant AGRP(9,0), 2
	 variant 120h, 70, , ASM_MACH3
	 variant 122h, 71, , ASM_MACH3
	 variant 121h, 72, , ASM_MACH3
	 variant 123h, 73, , ASM_MACH3
	 variant 124h, 74, , ASM_MACH3
	 variant 126h, 75, , ASM_MACH3
	 endvariant
	mne MOVSB	; ofs=4F2h
	 variant 0a4h, 0
	 endvariant
	mne MOVSW, ASM_D16	; ofs=4F5h
	mne MOVSD, ASM_D32	; ofs=4F6h
	 variant 0a5h, 0
	 endvariant
	mne MOVSX	; ofs=4FAh
	 variant 1beh, 48, , ASM_MACH3
	 variant 1bfh, 49, , ASM_MACH3
	 endvariant
	mne MOVZX	; ofs=501h
	 variant 1b6h, 48, , ASM_MACH3
	 variant 1b7h, 49, , ASM_MACH3
	 endvariant
	mne MUL ; ofs=508h
	 variant AGRP(6,4), 16
	 endvariant
	mne NEG ; ofs=50Bh
	 variant AGRP(6,3), 16, ASM_LOCKABLE
	 endvariant
	mne NOP ; ofs=50Fh
	 variant 090h, 0
	 endvariant
	mne NOT ; ofs=512h
	 variant AGRP(6,2), 16, ASM_LOCKABLE
	 endvariant
	mne OR	; ofs=516h
	 variant AGRP(0,1), 3, ASM_LOCKABLE
	 variant 00ch, 1
	 variant AGRP(1,1), 2, ASM_LOCKABLE
	 variant 008h, 4, ASM_LOCKABLE
	 variant 00ah, 5
	 endvariant
	mne ORG, ASM_ORG	; ofs=524h
	mne OUT ; ofs=526h
	 variant 0e6h, 50
	 variant 0eeh, 51
	 endvariant
	mne OUTSB	; ofs=52Bh
	 variant 06eh, 0, , ASM_MACH1
	 endvariant
	mne OUTSW, ASM_D16	; ofs=52Fh
	mne OUTSD, ASM_D32	; ofs=530h
	 variant 06fh, 0, , ASM_MACH1
	 endvariant
	mne POP ; ofs=535h
	 variant AGRP(10,0), 52
	 variant 058h, 17
	 variant 01fh, 67
	 variant 007h, 64
	 variant 017h, 66
	 variant 1a1h, 68, , ASM_MACH3
	 variant 1a9h, 69, , ASM_MACH3
	 endvariant
	mne POPA, ASM_D16	; ofs=546h
	mne POPAD, ASM_D32	; ofs=547h
	 variant 061h, 0, , ASM_MACH1
	 endvariant
	mne POPF, ASM_D16	; ofs=54Ch
	mne POPFD, ASM_D32	; ofs=54Dh
	 variant 09dh, 0
	 endvariant
	mne PUSH	; ofs=551h
	 variant 050h, 17
	 variant AGRP(3,6), 40
	 variant 06ah, 54, , ASM_MACH1
	 variant 068h, 53, , ASM_MACH1
	 variant 00eh, 65
	 variant 016h, 66
	 variant 01eh, 67
	 variant 006h, 64
	 variant 1a0h, 68, , ASM_MACH3
	 variant 1a8h, 69, , ASM_MACH3
	 endvariant
	mne PUSHA, ASM_D16	; ofs=56Ah
	mne PUSHAD, ASM_D32	; ofs=56Bh
	 variant 060h, 0, , ASM_MACH1
	 endvariant
	mne PUSHF, ASM_D16	; ofs=570h
	mne PUSHFD, ASM_D32	; ofs=571h
	 variant 09ch, 0
	 endvariant
	mne RCL ; ofs=575h
	 variant AGRP(11,2), 55
	 variant AGRP(12,2), 56
	 variant AGRP(13,2), 57, , ASM_MACH1
	 endvariant
	mne RCR ; ofs=57Dh
	 variant AGRP(11,3), 55
	 variant AGRP(12,3), 56
	 variant AGRP(13,3), 57, , ASM_MACH1
	 endvariant
	mne RDMSR	; ofs=585h
	 variant 132h, 0, , ASM_MACH5
	 endvariant
	mne RDPMC	; ofs=589h
	 variant 133h, 0, , ASM_MACH6
	 endvariant
	mne RDTSC	; ofs=58Dh
	 variant 131h, 0, , ASM_MACH5
	 endvariant
	mne REP, ASM_LOCKREP, 0f3h	; ofs=591h
	mne REPE, ASM_LOCKREP, 0f3h	; ofs=593h
	mne REPZ, ASM_LOCKREP, 0f3h	; ofs=595h
	mne REPNE, ASM_LOCKREP, 0f2h	; ofs=597h
	mne REPNZ, ASM_LOCKREP, 0f2h	; ofs=599h
	mne RET ; ofs=59Bh
	 variant 0c3h, 0
	 variant 0c2h, 58
	 endvariant
	mne RETF, ASM_D16	; ofs=5A0h
	mne RETFD, ASM_D32	; ofs=5A1h
	 variant 0cbh, 0
	 variant 0cah, 58
	 endvariant
	mne ROL ; ofs=5A7h
	 variant AGRP(11,0), 55
	 variant AGRP(12,0), 56
	 variant AGRP(13,0), 57, , ASM_MACH1
	 endvariant
	mne ROR ; ofs=5AFh
	 variant AGRP(11,1), 55
	 variant AGRP(12,1), 56
	 variant AGRP(13,1), 57, , ASM_MACH1
	 endvariant
	mne RSM ; ofs=5B7h
	 variant 1aah, 0, , ASM_MACH5
	 endvariant
	mne SAHF	; ofs=5BBh
	 variant 09eh, 0
	 endvariant
	mne SAL ; ofs=5BEh
	 variant AGRP(11,4), 55
	 variant AGRP(12,4), 56
	 variant AGRP(13,4), 57, , ASM_MACH1
	 endvariant
	mne SALC	; ofs=5C6h
	 variant 0d6h, 0
	 endvariant
	mne SAR ; ofs=5C9h
	 variant AGRP(11,7), 55
	 variant AGRP(12,7), 56
	 variant AGRP(13,7), 57, , ASM_MACH1
	 endvariant
	mne SBB ; ofs=5D1h
	 variant AGRP(0,3), 3, ASM_LOCKABLE
	 variant 01ch, 1
	 variant AGRP(1,3), 2, ASM_LOCKABLE
	 variant 018h, 4, ASM_LOCKABLE
	 variant 01ah, 5
	 endvariant
	mne SCASB	; ofs=5DFh
	 variant 0aeh, 0
	 endvariant
	mne SCASW, ASM_D16	; ofs=5E2h
	mne SCASD, ASM_D32	; ofs=5E3h
	 variant 0afh, 0
	 endvariant
	mne SETA	; ofs=5E7h
	 variant 197h, 59, , ASM_MACH3
	 endvariant
	mne SETAE	; ofs=5EBh
	 variant 193h, 59, , ASM_MACH3
	 endvariant
	mne SETB	; ofs=5EFh
	 variant 192h, 59, , ASM_MACH3
	 endvariant
	mne SETBE	; ofs=5F3h
	 variant 196h, 59, , ASM_MACH3
	 endvariant
	mne SETC	; ofs=5F7h
	 variant 192h, 59, , ASM_MACH3
	 endvariant
	mne SETE	; ofs=5FBh
	 variant 194h, 59, , ASM_MACH3
	 endvariant
	mne SETG	; ofs=5FFh
	 variant 19fh, 59, , ASM_MACH3
	 endvariant
	mne SETGE	; ofs=603h
	 variant 19dh, 59, , ASM_MACH3
	 endvariant
	mne SETL	; ofs=607h
	 variant 19ch, 59, , ASM_MACH3
	 endvariant
	mne SETLE	; ofs=60Bh
	 variant 19eh, 59, , ASM_MACH3
	 endvariant
	mne SETNA	; ofs=60Fh
	 variant 196h, 59, , ASM_MACH3
	 endvariant
	mne SETNAE	; ofs=613h
	 variant 192h, 59, , ASM_MACH3
	 endvariant
	mne SETNB	; ofs=617h
	 variant 193h, 59, , ASM_MACH3
	 endvariant
	mne SETNBE	; ofs=61Bh
	 variant 197h, 59, , ASM_MACH3
	 endvariant
	mne SETNC	; ofs=61Fh
	 variant 193h, 59, , ASM_MACH3
	 endvariant
	mne SETNE	; ofs=623h
	 variant 195h, 59, , ASM_MACH3
	 endvariant
	mne SETNG	; ofs=627h
	 variant 19eh, 59, , ASM_MACH3
	 endvariant
	mne SETNGE	; ofs=62Bh
	 variant 19ch, 59, , ASM_MACH3
	 endvariant
	mne SETNL	; ofs=62Fh
	 variant 19dh, 59, , ASM_MACH3
	 endvariant
	mne SETNLE	; ofs=633h
	 variant 19fh, 59, , ASM_MACH3
	 endvariant
	mne SETNO	; ofs=637h
	 variant 191h, 59, , ASM_MACH3
	 endvariant
	mne SETNP	; ofs=63Bh
	 variant 19bh, 59, , ASM_MACH3
	 endvariant
	mne SETNS	; ofs=63Fh
	 variant 199h, 59, , ASM_MACH3
	 endvariant
	mne SETNZ	; ofs=643h
	 variant 195h, 59, , ASM_MACH3
	 endvariant
	mne SETO	; ofs=647h
	 variant 190h, 59, , ASM_MACH3
	 endvariant
	mne SETP	; ofs=64Bh
	 variant 19ah, 59, , ASM_MACH3
	 endvariant
	mne SETPE	; ofs=64Fh
	 variant 19ah, 59, , ASM_MACH3
	 endvariant
	mne SETPO	; ofs=653h
	 variant 19bh, 59, , ASM_MACH3
	 endvariant
	mne SETS	; ofs=657h
	 variant 198h, 59, , ASM_MACH3
	 endvariant
	mne SETZ	; ofs=65Bh
	 variant 194h, 59, , ASM_MACH3
	 endvariant
	mne SGDT	; ofs=65Fh
	 variant AGRP(7,0), 29, , ASM_MACH2
	 endvariant
	mne SHL ; ofs=663h
	 variant AGRP(11,4), 55
	 variant AGRP(12,4), 56
	 variant AGRP(13,4), 57, , ASM_MACH1
	 endvariant
	mne SHLD	; ofs=66Bh
	 variant 1a4h, 60, , ASM_MACH3
	 variant 1a5h, 61, , ASM_MACH3
	 endvariant
	mne SHR ; ofs=672h
	 variant AGRP(11,5), 55
	 variant AGRP(12,5), 56
	 variant AGRP(13,5), 57, , ASM_MACH1
	 endvariant
	mne SHRD	; ofs=67Ah
	 variant 1ach, 60, , ASM_MACH3
	 variant 1adh, 61, , ASM_MACH3
	 endvariant
	mne SIDT	; ofs=681h
	 variant AGRP(7,1), 29, , ASM_MACH2
	 endvariant
	mne SLDT	; ofs=685h
	 variant AGRP(8,0), 41, , ASM_MACH2
	 endvariant
	mne SMSW	; ofs=689h
	 variant AGRP(7,4), 41, , ASM_MACH2
	 endvariant
	mne STC ; ofs=68Dh
	 variant 0f9h, 0
	 endvariant
	mne STD ; ofs=690h
	 variant 0fdh, 0
	 endvariant
	mne STI ; ofs=693h
	 variant 0fbh, 0
	 endvariant
	mne STOSB	; ofs=696h
	 variant 0aah, 0
	 endvariant
	mne STOSW, ASM_D16	; ofs=699h
	mne STOSD, ASM_D32	; ofs=69Ah
	 variant 0abh, 0
	 endvariant
	mne STR ; ofs=69Eh
	 variant AGRP(8,1), 41, , ASM_MACH2
	 endvariant
	mne SUB ; ofs=6A2h
	 variant AGRP(0,5), 3, ASM_LOCKABLE
	 variant 02ch, 1
	 variant AGRP(1,5), 2, ASM_LOCKABLE
	 variant 028h, 4, ASM_LOCKABLE
	 variant 02ah, 5
	 endvariant
	mne SYSENTER	; ofs=6B0h
	 variant 134h, 0, , ASM_MACH6
	 endvariant
	mne SYSEXIT	; ofs=6B4h
	 variant 135h, 0, , ASM_MACH6
	 endvariant
	mne TEST	; ofs=6B8h
	 variant 0a8h, 1
	 variant AGRP(6,0), 2
	 variant 084h, 4
	 variant 084h, 5
	 endvariant
	mne VERR	; ofs=6C1h
	 variant AGRP(8,4), 41, , ASM_MACH2
	 endvariant
	mne VERW	; ofs=6C5h
	 variant AGRP(8,5), 41, , ASM_MACH2
	 endvariant
	mne WAIT	; ofs=6C9h
	 variant 09bh, 0
	 endvariant
	mne WBINVD	; ofs=6CCh
	 variant 109h, 0, , ASM_MACH4
	 endvariant
	mne WRMSR	; ofs=6D0h
	 variant 130h, 0, , ASM_MACH5
	 endvariant
	mne XADD	; ofs=6D4h
	 variant 1c0h, 4, ASM_LOCKABLE, ASM_MACH4
	 endvariant
	mne XCHG	; ofs=6D9h
	 variant 090h, 62
	 variant 090h, 63
	 variant 086h, 4, ASM_LOCKABLE
	 variant 086h, 5, ASM_LOCKABLE
	 endvariant
	mne XLAT	; ofs=6E4h
	 variant 0d7h, 0
	 endvariant
	mne XLATB	; ofs=6E7h
	 variant 0d7h, 0
	 endvariant
	mne XOR ; ofs=6EAh
	 variant AGRP(0,6), 3, ASM_LOCKABLE
	 variant 034h, 1
	 variant AGRP(1,6), 2, ASM_LOCKABLE
	 variant 030h, 4, ASM_LOCKABLE
	 variant 032h, 5
	 endvariant
	mne ES, ASM_SEG, 026h	; ofs=6F8h
	mne CS, ASM_SEG, 02eh	; ofs=6FAh
	mne SS, ASM_SEG, 036h	; ofs=6FCh
	mne DS, ASM_SEG, 03eh	; ofs=6FEh
	mne FS, ASM_SEG, 064h	; ofs=700h
	mne GS, ASM_SEG, 065h	; ofs=702h
if MMXSUPP
	mne EMMS
	 variant 177h, 0, , ASM_MACH5
	 endvariant
	mne MOVD
	 variant 16eh, 76, , ASM_MACH5
	 variant 17eh, 77, , ASM_MACH5
	 endvariant
	mne MOVQ
	 variant 16fh, 78, , ASM_MACH5
	 variant 17fh, 79, , ASM_MACH5
	 endvariant
endif

end_mnlist label byte

;--- Disassembler: compressed table of the opcode types.
;--- If the item has the format OT(xx), it refers to table 'oplists'.
;--- Otherwise it's an offset for internal table 'disjmp'.

optypes label byte
	db OT(04),OT(04),OT(05),OT(05),OT(01),OT(01),OT(40),OT(40)	; 00 - 07 (main opcode part)
	db OT(04),OT(04),OT(05),OT(05),OT(01),OT(01),OT(41),  002h	; 08 - 0f
	db OT(04),OT(04),OT(05),OT(05),OT(01),OT(01),OT(42),OT(42)	; 10 - 17
	db OT(04),OT(04),OT(05),OT(05),OT(01),OT(01),OT(43),OT(43)	; 18 - 1f
	db OT(04),OT(04),OT(05),OT(05),OT(01),OT(01),  00Ah,OT(00)	; 20 - 27
	db OT(04),OT(04),OT(05),OT(05),OT(01),OT(01),  00Ah,OT(00)	; 28 - 2f
	db OT(04),OT(04),OT(05),OT(05),OT(01),OT(01),  00Ah,OT(00)	; 30 - 37
	db OT(04),OT(04),OT(05),OT(05),OT(01),OT(01),  00Ah,OT(00)	; 38 - 3f
	db OT(11),OT(11),OT(11),OT(11),OT(11),OT(11),OT(11),OT(11)	; 40 - 47
	db OT(11),OT(11),OT(11),OT(11),OT(11),OT(11),OT(11),OT(11)	; 48 - 4f
	db OT(11),OT(11),OT(11),OT(11),OT(11),OT(11),OT(11),OT(11)	; 50 - 57
	db OT(11),OT(11),OT(11),OT(11),OT(11),OT(11),OT(11),OT(11)	; 58 - 5f
	db OT(00),OT(00),OT(07),OT(06),  00Ah,	00Ah,  00Ah,  00Ah	; 60 - 67
	db OT(35),OT(21),OT(36),OT(1F),OT(00),OT(00),OT(00),OT(00)	; 68 - 6f
	db OT(27),OT(27),OT(27),OT(27),OT(27),OT(27),OT(27),OT(27)	; 70 - 77
	db OT(27),OT(27),OT(27),OT(27),OT(27),OT(27),OT(27),OT(27)	; 78 - 7f
	db   004h,  004h,  004h,  004h,OT(04),OT(04),OT(05),OT(05)	; 80 - 87
	db OT(04),OT(04),OT(05),OT(05),OT(2A),OT(07),OT(2B),  004h	; 88 - 8f
	db OT(00),OT(3E),OT(3E),OT(3E),OT(3E),OT(3E),OT(3E),OT(3E)	; 90 - 97
	db OT(00),OT(00),OT(0D),OT(00),OT(00),OT(00),OT(00),OT(00)	; 98 - 9f
	db OT(2C),OT(2C),OT(2D),OT(2D),OT(00),OT(00),OT(00),OT(00)	; a0 - a7
	db OT(01),OT(01),OT(00),OT(00),OT(00),OT(00),OT(00),OT(00)	; a8 - af
	db OT(2E),OT(2E),OT(2E),OT(2E),OT(2E),OT(2E),OT(2E),OT(2E)	; b0 - b7
	db OT(2F),OT(2F),OT(2F),OT(2F),OT(2F),OT(2F),OT(2F),OT(2F)	; b8 - bf
	db   004h,  004h,OT(3A),OT(00),OT(07),OT(07),  004h,  004h	; c0 - c7
	db OT(12),OT(00),OT(3A),OT(00),OT(25),OT(26),OT(00),OT(00)	; c8 - cf
	db   004h,  004h,  004h,  004h,OT(26),OT(26),OT(00),OT(00)	; d0 - d7
	db   006h,  006h,  006h,  006h,  006h,	006h,  006h,  006h	; d8 - df
	db OT(27),OT(27),OT(27),OT(27),OT(23),OT(23),OT(32),OT(32)	; e0 - e7
	db OT(0C),OT(0C),OT(0D),OT(27),OT(24),OT(24),OT(33),OT(33)	; e8 - ef
	db   00Ah,OT(00),  00Ah,  00Ah,OT(00),OT(00),  004h,  004h	; f0 - f7
	db OT(00),OT(00),OT(00),OT(00),OT(00),OT(00),  004h,  004h	; f8 - ff
	db OT(02),OT(02),OT(02),OT(02),OT(02),OT(02),OT(02),OT(02)	; 100 - 107 (Intel group 1)
	db OT(03),OT(03),OT(03),OT(03),OT(03),OT(03),OT(03),OT(03)	; 108 - 10f
	db OT(37),OT(37),OT(37),OT(37),OT(37),OT(37),OT(37),OT(37)	; 110 - 117 (Intel group 2)
	db OT(38),OT(38),OT(38),OT(38),OT(38),OT(38),OT(38),OT(38)	; 118 - 11f
	db OT(39),OT(39),OT(39),OT(39),OT(39),OT(39),OT(39),OT(39)	; 120 - 127 (Intel group 2a)
	db OT(02),OT(02),OT(10),OT(10),OT(10),OT(10),OT(10),OT(10)	; 128 - 12f (Intel group 3)
	db OT(10),OT(10),OT(28),OT(0E),OT(28),OT(0E),OT(28),  000h	; 130 - 137 (Intel group 5)
	db OT(29),OT(29),OT(29),OT(29),OT(29),OT(29),  000h,  000h	; 138 - 13f (Intel group 6)
	db OT(1D),OT(1D),OT(1D),OT(1D),OT(29),	000h,OT(29),OT(1D)	; 140 - 147 (Intel group 7)
	db OT(13),OT(13),OT(13),OT(13),OT(13),OT(13),OT(13),OT(13)	; 148 - 14f (Coprocessor d8)
	db OT(15),OT(15),OT(1C),OT(1C),OT(15),OT(15),OT(15),OT(15)	; 150 - 157
	db OT(13),  000h,OT(13),OT(13),OT(1D),OT(19),OT(1D),OT(19)	; 158 - 15f (Coprocessor d9)
	db OT(1B),OT(1C),  008h,OT(1B),  008h,	008h,  008h,  008h	; 160 - 167
	db OT(18),OT(18),OT(18),OT(18),OT(18),OT(18),OT(18),OT(18)	; 168 - 16f (Coprocessor da)
	db OT(15),OT(15),OT(15),OT(15),  000h,	008h,  000h,  000h	; 170 - 177
	db OT(18),  000h,OT(18),OT(18),  000h,OT(1A),  000h,OT(1A)	; 178 - 17f (Coprocessor db)
	db OT(15),OT(15),OT(15),OT(15),  008h,OT(1C),OT(1C),  000h	; 180 - 187
	db OT(14),OT(14),OT(14),OT(14),OT(14),OT(14),OT(14),OT(14)	; 188 - 18f (Coprocessor dc)
	db OT(16),OT(16),OT(1C),OT(1C),OT(16),OT(16),OT(16),OT(16)	; 190 - 197
	db OT(14),  000h,OT(14),OT(14),OT(1D),	000h,OT(1D),OT(19)	; 198 - 19f (Coprocessor dd)
	db OT(1B),OT(1C),OT(1B),OT(1B),OT(1C),OT(1C),  000h,  000h	; 1a0 - 1a7
	db OT(19),OT(19),OT(19),OT(19),OT(19),OT(19),OT(19),OT(19)	; 1a8 - 1af (Coprocessor de)
	db OT(17),OT(17),OT(1C),  008h,OT(17),OT(17),OT(17),OT(17)	; 1b0 - 1b7
	db OT(19),  000h,OT(19),OT(19),OT(1A),OT(0F),OT(1A),OT(0F)	; 1b8 - 1bf (Coprocessor df)
	db OT(1B),OT(1C),OT(1B),OT(1B),  008h,OT(1C),OT(1C),  000h	; 1c0 - 1c7
	db OT(00),OT(00),OT(00),OT(00),OT(00),OT(00),OT(00),  000h	; 1c8 - 1cf (Coprocessor groups)
	db OT(00),OT(00),OT(00),OT(00),OT(00),OT(00),OT(00),OT(00)	; 1d0 - 1d7
	db OT(00),OT(00),OT(00),OT(00),OT(00),OT(00),OT(00),OT(00)	; 1d8 - 1df
SPARSE_BASE equ $ - optypes

;--- The rest of these are squeezed.
	db	0,  004h,  004h,OT(08),OT(08),OT(00),OT(00),OT(00)	;00
	db OT(46),OT(48),OT(47),OT(49),OT(4A),OT(4B),OT(00),OT(00)	;08
	db OT(00),OT(00),OT(00),OT(00),OT(08),OT(08),OT(08),OT(08)	;10
	db OT(08),OT(08),OT(08),OT(08),OT(08),OT(08),OT(08),OT(08)	;18
	db OT(08),OT(08),OT(08),OT(08),OT(0C),OT(0C),OT(0C),OT(0C)	;20
	db OT(0C),OT(0C),OT(0C),OT(0C),OT(0C),OT(0C),OT(0C),OT(0C)	;28
	db OT(0C),OT(0C),OT(0C),OT(0C),OT(3B),OT(3B),OT(3B),OT(3B)	;30
	db OT(3B),OT(3B),OT(3B),OT(3B),OT(3B),OT(3B),OT(3B),OT(3B)	;38
	db OT(3B),OT(3B),OT(3B),OT(3B),OT(44),OT(44),OT(00),OT(0A)	;40
	db OT(3C),OT(3D),OT(45),OT(45),OT(00),OT(0A),OT(3C),OT(3D)	;48
	db OT(08),OT(04),OT(04),OT(07),OT(0A),OT(07),OT(07),OT(30)	;50
	db OT(31),  004h,OT(0A),OT(08),OT(08),OT(30),OT(31),OT(04)	;58
	db OT(04),  004h,OT(09),OT(09),OT(09),OT(09),OT(09),OT(09)	;60
	db OT(09),OT(09),OT(10),OT(10),OT(0B),OT(0B),OT(0B),OT(0B)	;68
	db OT(0F),OT(34),OT(02),OT(00),OT(00),OT(00),OT(00),OT(00)	;70
	db OT(00),OT(00),OT(00),OT(00),OT(00),OT(00),OT(00),OT(1E)	;78
if MMXSUPP
	db OT(4C),OT(4E),OT(00),OT(4D),OT(4F)
endif

P186	equ 1000h
P286	equ 2000h
P386	equ 3000h
P486	equ 4000h
P586	equ 5000h
P686	equ 6000h

	align 2

;--- Disassembler: compressed table of additional information.
;--- Bits 0-11 usually are the offset of the mnemonics table.
;--- Bits 12-15 are the cpu which introduced this opcode.

opinfo label word
	dw  MN_ADD, MN_ADD, MN_ADD, MN_ADD	; 00
	dw  MN_ADD, MN_ADD, MN_PUSH, MN_POP	; 04
	dw  MN_OR, MN_OR, MN_OR, MN_OR	; 08
	dw  MN_OR, MN_OR, MN_PUSH, 01e0h	; 0c
	dw  MN_ADC, MN_ADC, MN_ADC, MN_ADC	; 10
	dw  MN_ADC, MN_ADC, MN_PUSH, MN_POP	; 14
	dw  MN_SBB, MN_SBB, MN_SBB, MN_SBB	; 18
	dw  MN_SBB, MN_SBB, MN_PUSH, MN_POP	; 1c
	dw  MN_AND, MN_AND, MN_AND, MN_AND	; 20
	dw  MN_AND, MN_AND, 0001h, MN_DAA	; 24
	dw  MN_SUB, MN_SUB, MN_SUB, MN_SUB	; 28
	dw  MN_SUB, MN_SUB, 0101h, MN_DAS	; 2c
	dw  MN_XOR, MN_XOR, MN_XOR, MN_XOR	; 30
	dw  MN_XOR, MN_XOR, 0201h, MN_AAA	; 34
	dw  MN_CMP, MN_CMP, MN_CMP, MN_CMP	; 38
	dw  MN_CMP, MN_CMP, 0301h, MN_AAS	; 3c
	dw  MN_INC, MN_INC, MN_INC, MN_INC	; 40
	dw  MN_INC, MN_INC, MN_INC, MN_INC	; 44
	dw  MN_DEC, MN_DEC, MN_DEC, MN_DEC	; 48
	dw  MN_DEC, MN_DEC, MN_DEC, MN_DEC	; 4c
	dw  MN_PUSH, MN_PUSH, MN_PUSH, MN_PUSH	; 50
	dw  MN_PUSH, MN_PUSH, MN_PUSH, MN_PUSH	; 54
	dw  MN_POP, MN_POP, MN_POP, MN_POP	; 58
	dw  MN_POP, MN_POP, MN_POP, MN_POP	; 5c
	dw  P186 + MN_PUSHA, P186 + MN_POPA, P186 + MN_BOUND, P286 + MN_ARPL	; 60
	dw  P386 + 0401h, P386 + 0501h, P386 + 0010h, P386 + 0020h	; 64
	dw  P186 + MN_PUSH, P186 + MN_IMUL, P186 + MN_PUSH, P186 + MN_IMUL	; 68
	dw  P186 + MN_INSB, P186 + MN_INSW, P186 + MN_OUTSB, P186 + MN_OUTSW	; 6c
	dw  MN_JO, MN_JNO, MN_JB, MN_JAE	; 70
	dw  MN_JZ, MN_JNZ, MN_JBE, MN_JA	; 74
	dw  MN_JS, MN_JNS, MN_JPE, MN_JPO	; 78
	dw  MN_JL, MN_JGE, MN_JLE, MN_JG	; 7c
	dw  0100h, 0100h, 0100h, 0108h	; 80
	dw  MN_TEST, MN_TEST, MN_XCHG, MN_XCHG	; 84
	dw  MN_MOV, MN_MOV, MN_MOV, MN_MOV	; 88
	dw  MN_MOV, MN_LEA, MN_MOV, 02f8h	; 8c
	dw  MN_NOP, MN_XCHG, MN_XCHG, MN_XCHG	; 90
	dw  MN_XCHG, MN_XCHG, MN_XCHG, MN_XCHG	; 94
	dw  MN_CBW, MN_CWD, MN_CALL, MN_WAIT	; 98
	dw  MN_PUSHF, MN_POPF, MN_SAHF, MN_LAHF ; 9c
	dw  MN_MOV, MN_MOV, MN_MOV, MN_MOV	; a0
	dw  MN_MOVSB, MN_MOVSW, MN_CMPSB, MN_CMPSW	; a4
	dw  MN_TEST, MN_TEST, MN_STOSB, MN_STOSW	; a8
	dw  MN_LODSB, MN_LODSW, MN_SCASB, MN_SCASW	; ac
	dw  MN_MOV, MN_MOV, MN_MOV, MN_MOV	; b0
	dw  MN_MOV, MN_MOV, MN_MOV, MN_MOV	; b4
	dw  MN_MOV, MN_MOV, MN_MOV, MN_MOV	; b8
	dw  MN_MOV, MN_MOV, MN_MOV, MN_MOV	; bc
	dw  0120h, 0120h, MN_RET, MN_RET	; c0
	dw  MN_LES, MN_LDS, 0300h, 0300h	; c4
	dw  P186 + MN_ENTER, P186 + MN_LEAVE, MN_RETF, MN_RETF	; c8
	dw  MN_INT, MN_INT, MN_INTO, MN_IRET	; cc
	dw  0110h, 0110h, 0118h, 0118h	; d0
	dw  MN_AAM, MN_AAD, MN_SALC, MN_XLATB	; d4
	dw  0148h, 0158h, 0168h, 0178h	; d8
	dw  0188h, 0198h, 01a8h, 01b8h	; dc
	dw  MN_LOOPNZW, MN_LOOPZW, MN_LOOPW, MN_JCXZ	; e0
	dw  MN_IN, MN_IN, MN_OUT, MN_OUT	; e4
	dw  MN_CALL, MN_JMP, MN_JMP, MN_JMP	; e8
	dw  MN_IN, MN_IN, MN_OUT, MN_OUT	; ec
	dw  0008h, P386 + MN_INT1, 0002h, 0006h ; f0
	dw  MN_HLT, MN_CMC, 0128h, 0128h	; f4
	dw  MN_CLC, MN_STC, MN_CLI, MN_STI	; f8
	dw  MN_CLD, MN_STD, 02e0h, 0130h	; fc
	dw  MN_ADD, MN_OR, MN_ADC, MN_SBB	; 100
	dw  MN_AND, MN_SUB, MN_XOR, MN_CMP	; 104
	dw  MN_ADD, MN_OR, MN_ADC, MN_SBB	; 108
	dw  MN_AND, MN_SUB, MN_XOR, MN_CMP	; 10c
	dw  MN_ROL, MN_ROR, MN_RCL, MN_RCR	; 110
	dw  MN_SHL, MN_SHR, MN_SAL, MN_SAR	; 114
	dw  MN_ROL, MN_ROR, MN_RCL, MN_RCR	; 118
	dw  MN_SHL, MN_SHR, MN_SAL, MN_SAR	; 11c
	dw  P186 + MN_ROL, P186 + MN_ROR, P186 + MN_RCL, P186 + MN_RCR	; 120
	dw  P186 + MN_SHL, P186 + MN_SHR, P186 + MN_SAL, P186 + MN_SAR	; 124
	dw  MN_TEST, MN_TEST, MN_NOT, MN_NEG	; 128
	dw  MN_MUL, MN_IMUL, MN_DIV, MN_IDIV	; 12c
	dw  MN_INC, MN_DEC, MN_CALL, MN_CALL	; 130
	dw  MN_JMP, MN_JMP, MN_PUSH, 0000h	; 134
	dw  P286 + MN_SLDT, P286 + MN_STR, P286 + MN_LLDT, P286 + MN_LTR	; 138
	dw  P286 + MN_VERR, P286 + MN_VERW, 0000h, 0000h	; 13c
	dw  P286 + MN_SGDT, P286 + MN_SIDT, P286 + MN_LGDT, P286 + MN_LIDT	; 140
	dw  P286 + MN_SMSW, 0000h, P286 + MN_LMSW, P486 + MN_INVLPG	; 144
	dw  MN_FADD, MN_FMUL, MN_FCOM, MN_FCOMP ; 148
	dw  MN_FSUB, MN_FSUBR, MN_FDIV, MN_FDIVR	; 14c
	dw  MN_FADD, MN_FMUL, MN_FCOM, MN_FCOMP ; 150
	dw  MN_FSUB, MN_FSUBR, MN_FDIV, MN_FDIVR	; 154
	dw  MN_FLD, 0000h, MN_FST, MN_FSTP	; 158
	dw  MN_FLDENV, MN_FLDCW, MN_FNSTENV, MN_FNSTCW	; 15c
	dw  MN_FLD, MN_FXCH, 0308h, MN_FSTP	; 160
	dw  0310h, 01c8h, 01d0h, 01d8h	; 164
	dw  MN_FIADD, MN_FIMUL, MN_FICOM, MN_FICOMP	; 168
	dw  MN_FISUB, MN_FISUBR, MN_FIDIV, MN_FIDIVR	; 16c
	dw  P686 + MN_FCMOVB, P686 + MN_FCMOVE, P686 + MN_FCMOVBE, P686 + MN_FCMOVU	; 170
	dw  0000h, 0318h, 0000h, 0000h	; 174
	dw  MN_FILD, 0000h, MN_FIST, MN_FISTP	; 178
	dw  0000h, MN_FLD, 0000h, MN_FSTP	; 17c
	dw  P686 + MN_FCMOVNB, P686 + MN_FCMOVNE, P686 + MN_FCMOVNBE, P686 + MN_FCMOVNU ; 180
	dw  0320h, P686 + MN_FUCOMI, P686 + MN_FCOMI, 0000h	; 184
	dw  MN_FADD, MN_FMUL, MN_FCOM, MN_FCOMP ; 188
	dw  MN_FSUB, MN_FSUBR, MN_FDIV, MN_FDIVR	; 18c
	dw  MN_FADD, MN_FMUL, MN_FCOM, MN_FCOMP ; 190
	dw  MN_FSUBR, MN_FSUB, MN_FDIVR, MN_FDIV	; 194
	dw  MN_FLD, 0000h, MN_FST, MN_FSTP	; 198
	dw  MN_FRSTOR, 0000h, MN_FNSAVE, MN_FNSTSW	; 19c
	dw  MN_FFREE, MN_FXCH, MN_FST, MN_FSTP	; 1a0
	dw  P386 + MN_FUCOM, P386 + MN_FUCOMP, 0000h, 0000h	; 1a4
	dw  MN_FIADD, MN_FIMUL, MN_FICOM, MN_FICOMP	; 1a8
	dw  MN_FISUB, MN_FISUBR, MN_FIDIV, MN_FIDIVR	; 1ac
	dw  MN_FADDP, MN_FMULP, MN_FCOMP, 0328h ; 1b0
	dw  MN_FSUBRP, MN_FSUBP, MN_FDIVRP, MN_FDIVP	; 1b4
	dw  MN_FILD, 0000h, MN_FIST, MN_FISTP	; 1b8
	dw  MN_FBLD, MN_FILD, MN_FBSTP, MN_FISTP	; 1bc
	dw  MN_FFREEP, MN_FXCH, MN_FSTP, MN_FSTP	; 1c0
	dw  0330h, P686 + MN_FUCOMIP, P686 + MN_FCOMIP, 0000h	; 1c4
	dw  MN_FLD1, MN_FLDL2T, MN_FLDL2E, MN_FLDPI	; 1c8
	dw  MN_FLDLG2, MN_FLDLN2, MN_FLDZ, 0000h	; 1cc
	dw  MN_F2XM1, MN_FYL2X, MN_FPTAN, MN_FPATAN	; 1d0
	dw  MN_FXTRACT, P386 + MN_FPREM1, MN_FDECSTP, MN_FINCSTP	; 1d4
	dw  MN_FPREM, MN_FYL2XP1, MN_FSQRT, P386 + MN_FSINCOS	; 1d8
	dw  MN_FRNDINT, MN_FSCALE, P386 + MN_FSIN, P386 + MN_FCOS	; 1dc
;--- The rest of these are squeezed.
	dw  0, 0138h, 0140h, P286 + MN_LAR	;00
	dw  P286 + MN_LSL, P286 + MN_CLTS, P486 + MN_INVD, P486 + MN_WBINVD	;04
	dw  P386 + MN_MOV, P386 + MN_MOV, P386 + MN_MOV, P386 + MN_MOV	;08
	dw  P386 + MN_MOV, P386 + MN_MOV, P586 + MN_WRMSR, P586 + MN_RDTSC	;0C
	dw  P586 + MN_RDMSR, P686 + MN_RDPMC, P686 + MN_SYSENTER, P686 + MN_SYSEXIT	;10
	dw  P686 + MN_CMOVO, P686 + MN_CMOVNO, P686 + MN_CMOVB, P686 + MN_CMOVAE	;14
	dw  P686 + MN_CMOVZ, P686 + MN_CMOVNZ, P686 + MN_CMOVBE, P686 + MN_CMOVA	;18
	dw  P686 + MN_CMOVS, P686 + MN_CMOVNS, P686 + MN_CMOVPE, P686 + MN_CMOVPO	;1C
	dw  P686 + MN_CMOVL, P686 + MN_CMOVGE, P686 + MN_CMOVLE, P686 + MN_CMOVG	;20
	dw  P386 + MN_JO, P386 + MN_JNO, P386 + MN_JB, P386 + MN_JAE	;24
	dw  P386 + MN_JZ, P386 + MN_JNZ, P386 + MN_JBE, P386 + MN_JA	;28
	dw  P386 + MN_JS, P386 + MN_JNS, P386 + MN_JPE, P386 + MN_JPO	;2C
	dw  P386 + MN_JL, P386 + MN_JGE, P386 + MN_JLE, P386 + MN_JG	;30
	dw  P386 + MN_SETO, P386 + MN_SETNO, P386 + MN_SETB, P386 + MN_SETAE	;34
	dw  P386 + MN_SETZ, P386 + MN_SETNZ, P386 + MN_SETBE, P386 + MN_SETA	;38
	dw  P386 + MN_SETS, P386 + MN_SETNS, P386 + MN_SETPE, P386 + MN_SETPO	;3C
	dw  P386 + MN_SETL, P386 + MN_SETGE, P386 + MN_SETLE, P386 + MN_SETG	;40
	dw  P386 + MN_PUSH, P386 + MN_POP, P586 + MN_CPUID, P386 + MN_BT	;44
	dw  P386 + MN_SHLD, P386 + MN_SHLD, P386 + MN_PUSH, P386 + MN_POP	;48
	dw  P586 + MN_RSM, P386 + MN_BTS, P386 + MN_SHRD, P386 + MN_SHRD	;4C
	dw  P386 + MN_IMUL, P486 + MN_CMPXCHG, P486 + MN_CMPXCHG, P386 + MN_LSS ;50
	dw  P386 + MN_BTR, P386 + MN_LFS, P386 + MN_LGS, P386 + MN_MOVZX	;54
	dw  P386 + MN_MOVZX, 02e8h, P386 + MN_BTC, P386 + MN_BSF	;58
	dw  P386 + MN_BSR, P386 + MN_MOVSX, P386 + MN_MOVSX, P486 + MN_XADD	;5C
	dw  P486 + MN_XADD, 02f0h, P486 + MN_BSWAP, P486 + MN_BSWAP	;60
	dw  P486 + MN_BSWAP, P486 + MN_BSWAP, P486 + MN_BSWAP, P486 + MN_BSWAP	;64
	dw  P486 + MN_BSWAP, P486 + MN_BSWAP, MN_INC, MN_DEC	;68
	dw  P386 + MN_BT, P386 + MN_BTS, P386 + MN_BTR, P386 + MN_BTC	;6C
	dw  P586 + MN_CMPXCHG8B, MN_POP, MN_MOV, MN_FNOP	;70
	dw  MN_FCHS, MN_FABS, MN_FTST, MN_FXAM	;74
	dw  P386 + MN_FUCOMPP, MN_FNENI, MN_FNDISI, MN_FNCLEX	;78
	dw  MN_FNINIT, P286 + MN_FSETPM, MN_FCOMPP, P286 + MN_FNSTSW	;7C
if MMXSUPP
	dw  P586 + MN_MOVD, P586 + MN_MOVQ, P586 + MN_EMMS, P586 + MN_MOVD
	dw  P586 + MN_MOVQ
endif

;--- Disassembler: table converts unsqueezed numbers to squeezed.
;--- 1E0-2DF are extended opcodes (0F xx).

sqztab label byte
	db   1,  2,  3,  4,  0,  0,  5,  0	;1E0
	db   6,  7,  0,  0,  0,  0,  0,  0	;1E8
	db   0,  0,  0,  0,  0,  0,  0,  0	;1F0
	db   0,  0,  0,  0,  0,  0,  0,  0	;1F8
	db   8,  9, 10, 11, 12,  0, 13,  0	;200
	db   0,  0,  0,  0,  0,  0,  0,  0	;208
	db  14, 15, 16, 17, 18, 19,  0,  0	;210
	db   0,  0,  0,  0,  0,  0,  0,  0	;218
	db  20, 21, 22, 23, 24, 25, 26, 27	;220
	db  28, 29, 30, 31, 32, 33, 34, 35	;228
	db   0,  0,  0,  0,  0,  0,  0,  0	;230
	db   0,  0,  0,  0,  0,  0,  0,  0	;238
	db   0,  0,  0,  0,  0,  0,  0,  0	;240
if MMXSUPP
	db   0,  0,  0,  0,  0,  0,128,129	;248
	db   0,  0,  0,  0,  0,  0,  0,130	;250
	db   0,  0,  0,  0,  0,  0,131,132	;258
else
	db   0,  0,  0,  0,  0,  0,  0,  0	;248
	db   0,  0,  0,  0,  0,  0,  0,  0	;250
	db   0,  0,  0,  0,  0,  0,  0,  0	;258
endif
	db  36, 37, 38, 39, 40, 41, 42, 43	;260
	db  44, 45, 46, 47, 48, 49, 50, 51	;268
	db  52, 53, 54, 55, 56, 57, 58, 59	;270
	db  60, 61, 62, 63, 64, 65, 66, 67	;278
	db  68, 69, 70, 71, 72, 73,  0,  0	;280
	db  74, 75, 76, 77, 78, 79,  0, 80	;288
	db  81, 82, 83, 84, 85, 86, 87, 88	;290
	db   0,  0, 89, 90, 91, 92, 93, 94	;298
	db  95, 96,  0,  0,  0,  0,  0, 97	;2A0
	db  98, 99,100,101,102,103,104,105	;2A8
	db   0,  0,  0,  0,  0,  0,  0,  0	;2B0
	db   0,  0,  0,  0,  0,  0,  0,  0	;2B8
	db   0,  0,  0,  0,  0,  0,  0,  0	;2C0
	db   0,  0,  0,  0,  0,  0,  0,  0	;2C8
	db   0,  0,  0,  0,  0,  0,  0,  0	;2D0
	db   0,  0,  0,  0,  0,  0,  0,  0	;2D8

;--- 5 sparse groups

	db 106,107,  0,  0,  0,  0,  0,  0	;2E0
	db   0,  0,  0,  0,108,109,110,111	;2E8
	db   0,112,  0,  0,  0,  0,  0,  0	;2F0
	db 113,  0,  0,  0,  0,  0,  0,  0	;2F8
	db 114,  0,  0,  0,  0,  0,  0,  0	;300

;--- 6 sparse fpu groups

SFPGROUPS equ SPARSE_BASE + ( $ - sqztab )
	db 115,  0,  0,  0,  0,  0,  0,  0	;308
	db 116,117,  0,  0,118,119,  0,  0	;310
	db   0,120,  0,  0,  0,  0,  0,  0	;318
	db 121,122,123,124,125,  0,  0,  0	;320
	db   0,126,  0,  0,  0,  0,  0,  0	;328
	db 127,  0,  0,  0,  0,  0,  0,  0	;330

;--- Disassembler: table of mnemonics that change in the presence of a WAIT
;--- instruction.

wtab1	dw 0322h,0321h,0320h,0323h,019eh,015fh,015eh,0330h
	dw 019fh
wtab2 label word
	dw MN_FCLEX
	dw MN_FDISI
	dw MN_FENI
	dw MN_FINIT
	dw MN_FSAVE
	dw MN_FSTCW
	dw MN_FSTENV
	dw MN_FSTSW
	dw MN_FSTSW
N_WTAB	equ ($ - wtab2) / 2

;--- Disassembler: table for operands which have a different mnemonic for
;--- their 32 bit versions (66h prefix).

ltabo1	dw 098h,0a7h,099h,015ch,019ch,019eh,015eh,06dh
	dw 0cfh,0adh,0a5h,06fh,061h,09dh,060h,09ch
	dw 0cbh,0cah,0afh,0abh
ltabo2 label word
	dw MN_CWDE
	dw MN_CMPSD
	dw MN_CDQ
	dw MN_FLDENVD
	dw MN_FRSTORD
	dw MN_FSAVED
	dw MN_FSTENVD
	dw MN_INSD
	dw MN_IRETD
	dw MN_LODSD
	dw MN_MOVSD
	dw MN_OUTSD
	dw MN_POPAD
	dw MN_POPFD
	dw MN_PUSHAD
	dw MN_PUSHFD
	dw MN_RETFD
	dw MN_RETFD
	dw MN_SCASD
	dw MN_STOSD
N_LTABO equ ($ - ltabo2) / 2

;--- Disassembler: table for operands which have a different mnemonic for
;--- their 32 bit versions (67h prefix).

ltaba1	dw 0e3h,0e2h,0e1h,0e1h,0e0h,0e0h
ltaba2 label word
	dw MN_JECXZ
	dw MN_LOOPD
	dw MN_LOOPED
	dw MN_LOOPZD
	dw MN_LOOPNED
	dw MN_LOOPNZD
N_LTABA equ ($ - ltaba2) / 2

;--- Disassembler: table of lockable instructions

locktab label word
	dw 010ah,0102h,010h,011h,0108h,0100h,00h,01h
	dw 010ch,0104h,020h,021h,029bh,02efh,0293h,02eeh
	dw 028bh,02edh,0290h,0291h,02e1h,0131h,02e0h,0130h
	dw 012bh,012ah,0109h,0101h,08h,09h,010bh,0103h
	dw 018h,019h,010dh,0105h,028h,029h,02a0h,02a1h
	dw 086h,087h,010eh,0106h,030h,031h
N_LOCK	equ ($ - locktab) / 2
